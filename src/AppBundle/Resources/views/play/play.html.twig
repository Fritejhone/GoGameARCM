{% extends '@App/layout/layout.html.twig' %}

{% block title %}Salon de jeu{% endblock %}

{% block css %}

{% endblock %}

{% block content %}
    <div>
        <div id="data" data-status-game="{{ game.isWaiting }}" data-id-me="{{ user.id }}" data-id-game="{{ game.id }}" data-id-mycolor="{{ myColor }}" data-id-myturn="{{ myTurn }}"></div>
        <div class="panel panel-info">
            <div class="panel-heading"><h2 class="text-center">Bonjour, {{ user.pseudo }}</h2>
            </div>
            <div class="panel-body">
                <div>
                    <div class="row" style="padding-left: 15px">
                        <div id='board' class="col-md-7 col-xs-12" style="background-color: lightgray;">
                            {% for i in 0..12 %}
                                <div class="row">
                                    <div class="col-md-12" style="padding: 0">
                                        {% for j in 0..12 %}
                                            {% set isEmpty = 1 %}
                                            <div class="btn-board {% for position in game.positions %} {% if position.posX == i and position.posY == j %} {{ position.color == 1 ? 'white' : 'black' }} {% set isEmpty = 0 %} {% endif %}{% endfor %} {% if isEmpty == 1 %} empty {% endif %}" id='{{ i }}-{{ j }}' data-x="{{ i }}" data-y="{{ j }}"></div>
                                        {% endfor %}
                                    </div>
                                </div>
                            {% endfor %}
                        </div>
                        <div class="col-md-5 col-xs-12">
                            <div class="panel" style="border: #2c2c2c solid 1px">
                                <div class="panel-heading" style="background-color: #2c2c2c">
                                    <div class="panel-titles">
                                        <i class="fa fa-comments" aria-hidden="true"></i>
                                        <span style="color: white"><strong>Scores</strong></span>
                                    </div>
                                </div>
                                <div style="text-align: center" class="panel-body" id="scores">
                                    <p>
                                        10 points pour gagner
                                    </p>
                                    {% for user in user.game.users %}<strong><p>{{  user.pseudo }} - <span id="score{{ user.id }}">{{ user. points }}</span> pts</p></strong>{% endfor %}
                                </div>
                            </div>
                            <br>
                            <div class="panel" style="border: #2c2c2c solid 1px">
                                <div class="panel-heading" style="background-color: #2c2c2c">
                                    <div class="panel-titles">
                                        <i class="fa fa-comments" aria-hidden="true"></i>
                                        <span style="color: white"><strong>Chat de la partie</strong></span>
                                    </div>
                                </div>
                                <ul class="list list-unstyled panel-body" id="msg-list">
                                    {% for comment in user.game.comments %}
                                        {% include '@App/comment/single.html.twig' %}
                                    {% endfor %}
                                </ul>
                                <div class="panel-footer">
                                    <form method="POST" class="add-comment"
                                          action="{{ path('comment_post', {'id': user.id}) }}">
                                        <div class="form-group">
                                                <textarea
                                                        class="form-control autoExpand"
                                                        name="content"
                                                        required=""
                                                        type="text"
                                                        rows='3'
                                                        data-min-rows='3'>
                                                </textarea>
                                        </div>
                                        <div class="row">
                                            <div class="col-xs-12">
                                                <div class="text-right">
                                                    <input type="hidden" name="game" value="{{ game.id }}">
                                                    <button id='msg_form_btn' class=" clickableElement btn btn-xs btn-dblue">
                                                        <i class="fa fa-send"></i>
                                                        Envoyer
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

{% endblock %}

{% block js %}

    <script>
        $(function () {

            //Récupération de mon id et de la partie
            let me = $('#data').data('id-me');
            let game = $('#data').data('id-game');
            let myTurn = $('#data').data('id-myturn') === 1;
            let myColor = $('#data').data('id-mycolor');
            let moveHaveBeenTakenIntoAccountFlag = true;

            //Abonnement au channel propre à la partie
            let gameChannel = pusher.subscribe('game-' + game);

            initComments(gameChannel, me);

            //Ecouteur sur l'evenement nouveau coup
            gameChannel.bind('new_turn', function (data) {
                $.get(Routing.generate('get_turn', {id: data.message}, false))
                    .done(function (ret) {
                        if (!data.error) {

                            // TODO : mettre à jour le score à retourner dans la requete

                            //Mettre à jour le board, que si c'est pas mon tour
                            if(!myTurn){
                                // console.log('maj board', ret.posX, ret.color);
                                $('#'+ret.posX+'-'+ret.posY).removeClass('empty');
                                ret.color == 1 ? $('#'+ret.posX+'-'+ret.posY).addClass('white') : $('#'+ret.posX+'-'+ret.posY).addClass('black');
                            }

                            //Changer le tour de jeu
                            myTurn = !myTurn;

                            moveHaveBeenTakenIntoAccountFlag = true;
                        }
                        else {
                            console.log(data.error);
                        }
                    })
            });

            //TODO : attention au décallage entre le pion qui est joué et les pions qui doivent etre supprimés

            //Ecouteur sur les boutons
            $('.btn-board').each(function () {
                $(this).on("click", function () {
                    //Si c'est mon tour
                    if (myTurn && $(this).hasClass('empty') && moveHaveBeenTakenIntoAccountFlag) {

                        moveHaveBeenTakenIntoAccountFlag = false;

                        $(this).removeClass('empty');
                        myColor === 1 ? $(this).addClass('white') : $(this).addClass('black');

                        //AJAX request to tell backend that there is a new turn
                        $.post(Routing.generate('new_turn', {id: me}), {color: myColor, posX: $(this).data('x'), posY : $(this).data('y')})
                            .done(function (ret) {
                                if (!data.error) {
                                    // console.log('vous venez de jouer votre tour');
                                }
                                else{
                                    console.log(data.error);
                                    moveHaveBeenTakenIntoAccountFlag = true;
                                    // TODO : Enlever le bouton qui est passé à joué en cas d'erreur
                                }
                            });

                        // on cree le tableau bleu, contenant les lignes
                        let grille = new Array();

                        for ( let i = 0 ; i < 12 ; i++){
                            grille[i] = new Array();
                        }

                        for ( let i = 0 ; i < 12 ; i++){
                            for( let j = 0 ; j < 12 ; j++){
                                grille[i][j] = 2;
                            }
                        }

                        //On parcourt le board en regardant la couleur de pion de la personne qui ne vient pas de jouer

                        $('.btn-board.black').each(function () {

                            grille[$(this).data('x')][$(this).data('y')] = 0;

                        });

                        $('.btn-board.white').each(function () {

                            grille[$(this).data('x')][$(this).data('y')] = 1;

                        });

                        // TODO : pour optimiser la boucle on peut essayer de retenir les pions déjà vérifiés
                        // TODO : on peut également réduire le rayon de recherche autour du point joué (à une case) pour étudier l'encerclement à partir du point joué

                        let opponentColor = myColor === 0 ? 1 : 0;

                        //Pour chaque pion on vient regarder si il y a un pion ou un groupe de pions qui sont succeptibles de disparaitre
                        for ( let i = 0 ; i < 12 ; i++){
                            for( let j = 0 ; j < 12 ; j++){
                                if (grille[i][j] !== myColor && grille[i][j] !== 2)
                                {
                                    //On appelle la fonction qui va checker si le pion ou le groupe de pion est encerclé
                                    //La fonction retourne la grille avec les pions supprimés (si encerclé) et s'occupe de faire le lien avec le back
                                    grille = checkIfSurrounded(grille, i, j, myColor, opponentColor, me);
                                }
                            }
                        }
                    }
                })
            });

            //Ecouteur pour la fin de partie
            gameChannel.bind('end_game', function (data) {
                // TODO : faire côté back la page de fin de partie et passer par une page intermédiare
                window.location.href = Routing.generate('homepage');
                if(data.data === me){
                    alert("Vous avez gagné !!!! Bravo :) - vous allez etre redirigé");
                }
                else{
                    alert("Vous avez perdu ... - vous allez etre redirigé");
                }

                window.location.href = Routing.generate('homepage');
            });

            //Ne pas oublier de MAJ aussi le score
            //Ecouteur pour la suppression d'un pion
            gameChannel.bind('remove_pion', function (data) {
                //On récupère les coordonnées via les datas de pusher
                $('#'+data.posY+'-'+data.posX).removeClass('white');
                $('#'+data.posY+'-'+data.posX).removeClass('black');
                $('#'+data.posY+'-'+data.posX).addClass('empty');

                // userThatScored && points tells which scrore board to update and with which value
                $('#score'+data.userThatScored).text(data.points);
            });
        });

        //Fonction qui permet de gérer la suppression des pions encerclés
        function checkIfSurrounded(grille, i, j, attaquant, defenseur, me) {

            // on cree le tableau bleu, contenant les lignes
            let pointScanne = new Array();

            for ( let i = 0 ; i < 12 ; i++){
                pointScanne[i] = new Array();
            }

            for ( let i = 0 ; i < 12 ; i++){
                for( let j = 0 ; j < 12 ; j++){
                    pointScanne[i][j] = 0;
                }
            }

            let toStudy = new Array();

            toStudy.push([i,j]);

            let toDelete = new Array();

            while(toStudy.length > 0){

                let pos = toStudy.shift(); //prend le premier et le retire de la liste

                let x = pos.shift();
                let y  = pos.shift();

                //On regarde dans toutes les directions si il y a un point vide
                if((x > 0 && grille[x-1][y] === 2) || (y > 0 && grille[x][y-1] === 2) || (x < 12 && grille[x+1][y] === 2) || (y < 12 && grille[x][y+1] === 2)){
                    return grille;
                }

                //Rajouter dans la liste à suppr, de la matrice de point scannés
                toDelete.push([x,y]);
                pointScanne[x][y] = 1;

                if(x > 0 && pointScanne[x-1][y] === 0 && grille[x-1][y] === defenseur){
                    toStudy.push([x-1,y]);
                }

                if(y > 0 && pointScanne[x][y-1] === 0 && grille[x][y-1] === defenseur){
                    toStudy.push([x,y-1]);
                }

                if(y < 12 && pointScanne[x][y+1] === 0 && grille[x][y+1] === defenseur){
                    toStudy.push([x,y+1]);
                }

                if(x < 12 && grille[x+1][y] === defenseur){
                    toStudy.push([x+1,y]);
                }
            }

            //Si on arrive ici c'est qu'on a pas trouvé de liberté sur les points explorés
            //On prend alors la liste des points à suppr et on MAJ la grille + on passe l'info au back qui va gérer le temps réel
            //Tant que toDelete est pas vide
            while(toDelete.length > 0){

                let posToDelete = toDelete.shift();

                let xToDelete = posToDelete.shift();
                let yToDelete = posToDelete.shift();

                //On communique à la BDD la position à suppr
                $.post(Routing.generate('remove_pion', {id: me}), {posX: xToDelete, posY : yToDelete});

                //On repasse a l'équivalent de empty dans la grille
                grille[xToDelete][yToDelete] = 2;
            }

            return grille;
        }

        //Fonction qui permet de gérer l'init de tout ce qui attrait aux commentaires
        function initComments(gameChannel, me) {

            //Bug de place holder à corriger
            $("textarea[name='content']").val('');

            //En cas de reload on remet les messages en bas de liste
            $('#msg-list').scrollTop($('#msg-list')[0].scrollHeight);

            $(".add-comment").submit(function (event) {
                event.preventDefault();
                sendComment(event, $(this), me);
            });

            //Messagerie en temps réel
            gameChannel.bind('new_comment', function (data) {
                $.get(Routing.generate('get_last_comment', {comment_id: data.message, user_id: me}, false))
                    .done(function (ret) {
                        if (!data.error) {
                            $('#msg-list').append(ret);
                            $('#msg-list').animate({ scrollTop: $('#msg-list').prop("scrollHeight")}, 1000);
                        }
                        else {
                            console.log(data.error);
                        }
                    });
            });

        }

        //Envoi d'un commentaire
        function sendComment(event, _, me) {

            let content = _.find("textarea[name='content']").val();
            _.find('button').prop('disabled', true);

            $.post(Routing.generate('comment_post', {id: me}), { content: content }).done(function (data) {
                if (!data.error) {
                    //On laisse le temps réel se débrouiller d'afficher la donnée, à voir si c'est le plus pertinent
                    _.find("textarea[name='content']").val('');
                } else {
                    _.append('<ul class="list-unstyled"><li> ' + data.error + '</li></ul>');
                }
            }).always(function () {
                _.find('button').prop('disabled', false);
            });
        }

    </script>

{% endblock %}